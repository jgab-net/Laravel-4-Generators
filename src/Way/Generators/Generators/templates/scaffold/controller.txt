<?php

class {{className}} extends BaseController {

	/**
	 * {{Model}} Repository
	 *
	 * @var {{Model}}
	 */
	protected ${{model}};

	public function __construct({{Model}} ${{model}})
	{
		$this->{{model}} = ${{model}};
	}

	/**
	 * Display a listing of the resource.
	 *
	 * @return Response
	 */
	public function index()
	{
		${{models}} = $this->{{model}}->all();

        if(Request::header('Content-Type')=='application/json'){
            return Response::json(${{models}});
        }

		return View::make('{{models}}.index', compact('{{models}}'));
	}

	/**
	 * Show the form for creating a new resource.
	 *
	 * @return Response
	 */
	public function create()
	{
		return View::make('{{models}}.create');
	}

	/**
	 * Store a newly created resource in storage.
	 *
	 * @return Response
	 */
	public function store()
	{
		$this->{{model}} = new {{Model}}(
		    Request::header('Content-Type')=='application/json'?Input::json()->all():Input::all()
		);

        if ($this->{{model}}->save())
        {
            if(Request::header('Content-Type')=='application/json'){
                return Response::json($this->{{model}});
            }
            return Redirect::route('{{models}}.index');
        }

        if(Request::header('Content-Type')=='application/json'){
            return Response::json($this->{{model}}->getErrors()->all(),400);
        }

		return Redirect::route('{{models}}.create')
			->withInput()
			->withErrors($this->{{model}}->getErrors())
			->with('message', 'There were validation errors.');
	}

	/**
	 * Display the specified resource.
	 *
	 * @param  int  $id
	 * @return Response
	 */
	public function show($id)
	{
		${{model}} = $this->{{model}}->find($id);

        if(Request::header('Content-Type')=='application/json'){
            if(is_null(${{model}})){
                return Response::json(array('not found'),400);
            }
            return Response::json(${{model}});
        }

		return View::make('{{models}}.show', compact('{{model}}'));
	}

	/**
	 * Show the form for editing the specified resource.
	 *
	 * @param  int  $id
	 * @return Response
	 */
	public function edit($id)
	{
		${{model}} = $this->{{model}}->find($id);

		if (is_null(${{model}}))
		{
			return Redirect::route('{{models}}.index');
		}

		return View::make('{{models}}.edit', compact('{{model}}'));
	}

	/**
	 * Update the specified resource in storage.
	 *
	 * @param  int  $id
	 * @return Response
	 */
	public function update($id)
	{
	    ${{model}} = $this->{{model}}->find($id);

        if(is_null(${{model}})){
            return Response::json(array('There were validation errors.'),400);
        }

	    ${{model}}->fill(
	        Request::header('Content-Type')=='application/json'?Input::json()->all():Input::all(), '_method'
	    );

        if(${{model}}->update()){
            if(Request::header('Content-Type')=='application/json'){
                return Response::json(${{model}});
            }
            return Redirect::route('{{models}}.show', $id);
        }

        if(Request::header('Content-Type')=='application/json'){
            return Response::json($this->test->getErrors()->all(),400);
        }

		return Redirect::route('{{models}}.edit', $id)
			->withInput()
			->withErrors(${{model}}->getErrors())
			->with('message', 'There were validation errors.');
	}

	/**
	 * Remove the specified resource from storage.
	 *
	 * @param  int  $id
	 * @return Response
	 */
	public function destroy($id)
	{
		${{model}}=$this->{{model}}->find($id);

		if(is_null(${{model}})){
		    return Response::json(array('There were validation errors.'),400);
		}

		${{model}}->delete();

		if(Request::header('Content-Type')=='application/json'){
		    return Response::json($this->test->all());
		}

		return Redirect::route('{{models}}.index');
	}

}
